{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This is a command line tool used for retrieving images from various image search backends (e.g. Unsplash, Google). This tool is primarily developed for educational purposes to show people how to develop plugin friendly Python applications. Furthermore, it is an example project that shows how to effectively pair a handful of popular Python libraries to write command line applications.</p> <p>To facilitate our plugin architecture, the pluggy library is used. Other libraries used include the following:</p> <ul> <li>click: used for structuring the command line application \ud83d\uddb1 \ud83d\udcbb</li> <li>pydantic: used for handling configuration file validation \ud83d\uddc3</li> <li>rich: used for UX/UI elements and generally making the application more pretty \ud83c\udf08</li> </ul>"},{"location":"#why-latz","title":"Why \"latz\"","text":"<p>\"latz\" is short and easy to type! This is super important when writing CLI programs. I also might add a geolocation search feature, so it is a reference  to the word \"latitude\".</p>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<p>latz is available for install either on PyPI:</p> <pre><code># Run from a new virtual environment\n$ pip install latz\n</code></pre> <p>or my own anaconda.org channel:</p> <pre><code>$ conda create -n latz 'thath::latz'\n</code></pre> <p>If you are interested in tinkering around with the code yourself, you can also run it locally:</p> <pre><code>$ git clone git@github.com:/travishathaway/latz.git\n$ cd latz\n# Create a virtual environment however you like..\n$ pip install -e .\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>Latz comes initially configured with the \"unsplash\" image search backend. To use this, you will need to create an Unsplash account and create a test application. After getting your \"access_key\", you can set this value by running this command:</p> <pre><code>$ latz config set search_backend_settings.unsplash.access_key=&lt;YOUR_ACCESS_KEY&gt;\n</code></pre> <p>Once this is configured, you can search Unsplash for bunny pictures:</p> <pre><code>$ latz search \"bunny\"\n\u250f\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 #  \u2503 Link                                                \u2503  Backend \u2503\n\u2521\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 1  \u2502 https://unsplash.com/photos/hcxqLJjI99E/download?i\u2026 \u2502 unsplash \u2502\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#configuring","title":"Configuring","text":"<p>The configuration for latz is stored in your home direct and is in the JSON format. Below is a what a default version of this configuration looks like:</p> <pre><code>{\n\"search_backends\": [\n\"unsplash\"\n],\n\"search_backend_settings\": {\n\"placeholder\": {\n\"type\": \"kitten\"\n},\n\"unsplash\": {\n\"access_key\": \"your-access-key\"\n}\n}\n}\n</code></pre> <p>Latz will also search in your current working directory for a <code>.latz.json</code> file and use this in your configuration. Files in the current working directory will be prioritized over your home directory location.</p> <p>To see other available image search backends, see Available image search backends below.</p>"},{"location":"#available-image-search-backends","title":"Available image search backends","text":"<p>Here are a list of the available search backends:</p>"},{"location":"#built-in","title":"Built-in","text":"<ul> <li>\"unsplash\"</li> <li>\"placeholder\"</li> </ul>"},{"location":"#third-party","title":"Third-party","text":"<ul> <li>latz-imgur</li> </ul>"},{"location":"#how-to-extend-and-write-your-own-image-search-backend","title":"How to extend and write your own image search backend","text":"<p>Please see the creating plugins guide in the documentation.</p>"},{"location":"cli_reference/","title":"CLI Reference","text":""},{"location":"cli_reference/#latz","title":"latz","text":"<p>\"latz\" is a command line tool for searching images via various image API backends. It is largely meant for educational purposes to show how to develop plugin friendly Python applications.</p> <p>The included commands are \"search\" for performing actual image searches and \"config\" for setting and displaying configuration variables.</p> <p>Usage:</p> <pre><code>latz [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#config","title":"config","text":"<p>Various commands for showing and setting configuration values</p> <p>Usage:</p> <pre><code>latz config [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#set","title":"set","text":"<p>Set configuration values.</p> <p>Usage:</p> <pre><code>latz config set [OPTIONS] [CONFIG_VALUES]...\n</code></pre> <p>Options:</p> <pre><code>  -c, --config PATH  Path of config file to write to. Defaults to ~/.latz.json\n  --help             Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#show","title":"show","text":"<p>Prints the current config</p> <p>Usage:</p> <pre><code>latz config show [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli_reference/#search","title":"search","text":"<p>Command that retrieves an image based on a search term</p> <p>Usage:</p> <pre><code>latz search [OPTIONS] QUERY\n</code></pre> <p>Options:</p> <pre><code>  -l, --limit INTEGER\n  --help               Show this message and exit.\n</code></pre>"},{"location":"creating-plugins/","title":"Creating Plugins","text":"<p>This guide will show you how to create your own latz search backend hook. These search backend hooks allow you to add additional image search APIs to latz. Once complete, you will be able to use these new search backends with the <code>latz search</code> command.</p> <p>Check out latz-imgur on GitHub if you would like to skip ahead and browse the final working example.</p>"},{"location":"creating-plugins/#requirements","title":"Requirements","text":"<p>To follow along, you will need to create an Imgur account and register an application via their web interface. Once complete, save the <code>client_id</code> you receive as we will be using that for this application. Head over to their documentation for more information.</p> <p>For managing dependencies and to make it easier to publish to PyPI later, we use the tool poetry. Please install and configure this if you do not currently have it on your computer.</p>"},{"location":"creating-plugins/#setting-up-our-environment","title":"Setting up our environment","text":"<p>The first steps necessary are creating a directory for our project and adding a <code>pyproject.toml</code> file. To do so, we run the following commands:</p> <pre><code>mkdir latz-imgur &amp;&amp; cd latz-imgur\n\npoetry init \\\n--name=latz-imgur \\\n--description=\"Imgur plugin for latz\" \\\n--author=\"Your name &lt;your-email@example.com\" \\\n--python=\"^3.10\" \\\n--dependency=\"latz\" \\\n--dependency=\"pydantic\" \\\n--dependency=\"httpx\" \\\n--no-interaction\n</code></pre> <p>Note</p> <p>The extra dependencies we install are <code>latz</code>, <code>pydantic</code> and <code>httpx</code>. You will see exactly how we use all three of these dependencies below.</p> <p>Now that we have a directory and a <code>pyproject.toml</code> file, we can use the following commands to initialize our development environment:</p> <pre><code># Install project dependencies including \"latz\"\npoetry install\n\n# Start a shell where we have access to all of our project dependencies\npoetry shell\n</code></pre>"},{"location":"creating-plugins/#create-the-plugin","title":"Create the plugin","text":"<p>At this point, you can open the folder (<code>latz-imgur</code> in our example) with your favorite IDE or text editor. The first thing we need to do is create a Python module called <code>latz_imgur</code> at the top of the directory structure. Be sure this folder contains an <code>__init__.py</code> file so that it is recognized as a Python module \ud83d\ude09.</p> <p>In that new Python module, we create a file called <code>main.py</code>.  This file will contain all the code necessary for our Imgur plugin. Below, we go through each section of this file. Feel free to incrementally add to this file as your go along or download the full version here: latz_imgur/main.py.</p>"},{"location":"creating-plugins/#plugin-configuration","title":"Plugin configuration","text":"<p>Each new image API plugin may require a different set of settings. Latz recognizes this and therefore allows you to dynamically add any new settings you wish. For our application, we add the required <code>access_key</code> setting that the Imgur API requires.</p> <p>We define these extra settings as pydantic models.</p> <pre><code>from pydantic import BaseModel, Field\n\n# Module level constant declaring the name of our plugin\nPLUGIN_NAME = \"imgur\"\n\n\nclass ImgurBackendConfig(BaseModel):\n\"\"\"\n    Imgur requires the usage of an ``access_key`` when using their API.\n    We expose these settings here so users of the CLI tool can configure it\n    themselves.\n    \"\"\"\n\n    access_key: str = Field(description=\"Access key for the Imgur API\")\n</code></pre> <p>Note</p> <p>Latz uses this <code>ImgurBackendConfig</code> model to dynamically generate its own <code>AppConfig</code> model at runtime. Check out Dynamic model creation in the pydantic docs to learn more.</p>"},{"location":"creating-plugins/#search-backend-hook-function","title":"Search backend hook function","text":"<p>Now that our plugin is able to gather the configuration settings necessary to run (i.e. the \"access_key\" we get from Imgur), we are ready to write the actual search API code. To make this work, we need to define an async search function that returns a <code>tuple</code> of <code>ImageSearchResult</code> objects. Latz will pass an instance of the httpx.AsyncClient, the application configuration and the search query to this function for us.</p> <p>Below is an example of what this could look like:</p> <p>Note</p> <p>Click on the tool tips in the code to learn more  </p> latz_imgur/main.py<pre><code>import urllib.parse\n\nimport httpx\n\nfrom latz.exceptions import SearchBackendError\nfrom latz.image import ImageSearchResult\n\n#: Base URL for the Imgur API\nBASE_URL = \"https://api.imgur.com/3/\"\n\n#: Endpoint used for searching images\nSEARCH_ENDPOINT = urllib.parse.urljoin(BASE_URL, \"gallery/search\")\n\nasync def search(client, config, query: str) -&gt; tuple[ImageSearchResult, ...]: # (1)\n\"\"\"\n    Search hook that will be invoked by latz while invoking the \"search\" command\n    \"\"\"\n    client.headers = httpx.Headers({\n        \"Authorization\": f\"Client-ID {config.search_backend_settings.imgur.access_key}\"\n    })\n    json_data = await _get(client, SEARCH_ENDPOINT, query)\n\n    return tuple(\n        ImageSearchResult(  # (2)\n            url=record_image.get(\"link\"),\n            width=record_image.get(\"width\"),\n            height=record_image.get(\"height\")\n        )\n        for record in json_data.get(\"data\", tuple())\n        for record_image in record.get(\"images\", tuple())\n    )\n\n\nasync def _get(client: httpx.AsyncClient, url: str, query: str) -&gt; dict:\n\"\"\"\n    Wraps `client.get` call in a try, except so that we raise\n    an application specific exception instead.\n\n    :raises SearchBackendError: Encountered during problems querying the API\n    \"\"\"\n    try:\n        resp = await client.get(url, params={\"query\": query})\n        resp.raise_for_status()\n    except httpx.HTTPError as exc:\n        raise SearchBackendError(str(exc), original=exc)\n\n    json_data = resp.json()\n\n    if not isinstance(json_data, dict):\n        raise SearchBackendError(\"Received malformed response from search backend\")\n\n    return json_data\n</code></pre> <ol> <li>The arguments passed to this function give you everything you need to make a search    request. The <code>client</code> is a httpx.AsyncClient, the <code>config</code> object    is the application configuration and the <code>query</code> string is the search string passed in    from the command line.</li> <li><code>ImageSearchResult</code> is a special type defined by latz.    Using this type helps ensure the result you return will be properly rendered.</li> </ol>"},{"location":"creating-plugins/#registering-everything-with-latz","title":"Registering everything with latz","text":"<p>We are now at the final step: registering everything we have written with latz. To do this, we need to use the <code>latz.plugins.hookimpl</code> decorator to register our plugins. We do this by decorating a function called <code>search_backend</code> that returns a <code>SearchBackendHook</code> object. The <code>SearchBackendHook</code> object is an object which has three fields:</p> <ul> <li><code>name</code>: name of the plugin that users will use to specify it their configuration</li> <li><code>search</code>: async function that will be called to search for images</li> <li><code>config_fields</code>: Pydantic model representing the config fields we want to expose in the    application</li> </ul> <p>Here is what this function looks like:</p> latz_imgur/main.py<pre><code>from latz.plugins import hookimpl, SearchBackendHook\n\n@hookimpl\ndef search_backend():\n\"\"\"\n    Registers our Imgur image API backend\n    \"\"\"\n    return SearchBackendHook(\n        name=PLUGIN_NAME,\n        search=search,\n        config_fields=ImgurBackendConfig(access_key=\"\"),\n    )\n</code></pre>"},{"location":"creating-plugins/#wrapping-up","title":"Wrapping up","text":"<p>In this guide, we showed how to create a latz search backend hook. The most important steps were:</p> <ol> <li>Creating our configuration fields, so we can allow users of the plugin to define necessary    access tokens</li> <li>Creating the <code>search</code> function which returns a <code>tuple</code> of <code>ImageSearchResult</code>    objects.</li> <li>Tying everything together by creating an <code>search_backend</code> function decorated by <code>latz.plugins.hookimpl</code>.    This function's only responsibility is to return an <code>SearchBackendHook</code>    object that combines everything we have written in this module so far.</li> </ol> <p>Thanks for following along and happy plugin writing \u270c\ufe0f</p>"},{"location":"plugin_api_reference/","title":"Plugin API Reference","text":"<p>This file contains important references to the latz API, especially ones relevant for writing plugins.</p>"},{"location":"plugin_api_reference/#latz.image.ImageSearchResult","title":"<code>ImageSearchResult</code>","text":"<p>         Bases: <code>NamedTuple</code></p> <p>Represents an individual search result object. It holds all relevant data for a single search result including the image size and URL.</p> Source code in <code>latz/image.py</code> <pre><code>class ImageSearchResult(NamedTuple):\n\"\"\"\n    Represents an individual search result object. It holds all relevant data\n    for a single search result including the image size and URL.\n    \"\"\"\n    url: str | None\n    width: int | None\n    height: int | None\n    search_backend: str | None\n</code></pre>"},{"location":"plugin_api_reference/#latz.plugins.hookspec.AppHookSpecs","title":"<code>AppHookSpecs</code>","text":"<p>Holds all hookspecs for this application</p> Source code in <code>latz/plugins/hookspec.py</code> <pre><code>class AppHookSpecs:\n\"\"\"Holds all hookspecs for this application\"\"\"\n\n    @hookspec\n    def search_backend(self) -&gt; Iterable[SearchBackendHook]:\n\"\"\"\n        Hookspec for the search backend hook.\n\n        Check out the [creating plugins][creating-plugins] guide for more information on\n        using this plugin hook.\n        \"\"\"\n        return tuple()\n</code></pre>"},{"location":"plugin_api_reference/#latz.plugins.hookspec.AppHookSpecs.search_backend","title":"<code>search_backend()</code>","text":"<p>Hookspec for the search backend hook.</p> <p>Check out the creating plugins guide for more information on using this plugin hook.</p> Source code in <code>latz/plugins/hookspec.py</code> <pre><code>@hookspec\ndef search_backend(self) -&gt; Iterable[SearchBackendHook]:\n\"\"\"\n    Hookspec for the search backend hook.\n\n    Check out the [creating plugins][creating-plugins] guide for more information on\n    using this plugin hook.\n    \"\"\"\n    return tuple()\n</code></pre>"},{"location":"plugin_api_reference/#latz.plugins.hookspec.SearchBackendHook","title":"<code>SearchBackendHook</code>","text":"<p>         Bases: <code>NamedTuple</code></p> <p>Holds the metadata and callable for using the image search hook.</p> Source code in <code>latz/plugins/hookspec.py</code> <pre><code>class SearchBackendHook(NamedTuple):\n\"\"\"\n    Holds the metadata and callable for using the image search hook.\n    \"\"\"\n\n    name: str\n\"\"\"\n    Namespace for the image API plugin; this is the value users will use in their\n    config files to specify this particular plugin.\n\n    **Example:**\n\n    ```python\n    from latz.plugins import SearchBackendHook\n\n    @hookimpl\n    def search_backend():\n        return SearchBackendHook(\n            name=\"custom\",\n            ...\n        )\n    ```\n\n    This would later be referred to as `custom` in the settings file:\n\n    ```json\n    {\n      \"search_backends\": [\"custom\"],\n      \"search_backend_settings\": {\n        \"custom\": {\n          \"param_one\": \"value\"\n        }\n      }\n    }\n    ```\n    \"\"\"\n\n    search: Callable[\n        [httpx.AsyncClient, Any, str], Awaitable[tuple[ImageSearchResult, ...]]\n    ]\n\"\"\"\n    Callable that implements the search hook.\n    \"\"\"\n\n    config_fields: BaseModel\n\"\"\"\n    Pydantic model that defines all the settings that this plugin needs.\n\n    **Example:**\n\n    ```python\n\n    from pydantic import BaseModel, Field\n\n    PLUGIN_NAME = \"custom\"\n\n    class CustomConfigFields(BaseModel):\n        access_key: str = Field(description=\"Access key for the API\")\n\n    @hookimpl\n    def image_api():\n        return ImageAPIPlugin(\n            name=PLUGIN_NAME,\n            config_fields=CustomConfigFields(access_key=\"\"),\n            ...\n        )\n    ```\n    \"\"\"\n</code></pre>"},{"location":"plugin_api_reference/#latz.plugins.hookspec.SearchBackendHook.config_fields","title":"<code>config_fields: BaseModel</code>  <code>class-attribute</code>","text":"<p>Pydantic model that defines all the settings that this plugin needs.</p> <p>Example:</p> <pre><code>from pydantic import BaseModel, Field\n\nPLUGIN_NAME = \"custom\"\n\nclass CustomConfigFields(BaseModel):\n    access_key: str = Field(description=\"Access key for the API\")\n\n@hookimpl\ndef image_api():\n    return ImageAPIPlugin(\n        name=PLUGIN_NAME,\n        config_fields=CustomConfigFields(access_key=\"\"),\n        ...\n    )\n</code></pre>"},{"location":"plugin_api_reference/#latz.plugins.hookspec.SearchBackendHook.name","title":"<code>name: str</code>  <code>class-attribute</code>","text":"<p>Namespace for the image API plugin; this is the value users will use in their config files to specify this particular plugin.</p> <p>Example:</p> <pre><code>from latz.plugins import SearchBackendHook\n\n@hookimpl\ndef search_backend():\n    return SearchBackendHook(\n        name=\"custom\",\n        ...\n    )\n</code></pre> <p>This would later be referred to as <code>custom</code> in the settings file:</p> <pre><code>{\n\"search_backends\": [\"custom\"],\n\"search_backend_settings\": {\n\"custom\": {\n\"param_one\": \"value\"\n}\n}\n}\n</code></pre>"},{"location":"plugin_api_reference/#latz.plugins.hookspec.SearchBackendHook.search","title":"<code>search: Callable[[httpx.AsyncClient, Any, str], Awaitable[tuple[ImageSearchResult, ...]]]</code>  <code>class-attribute</code>","text":"<p>Callable that implements the search hook.</p>"}]}